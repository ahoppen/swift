{
    "docker.host": "ubuntu@ec2-18-159-208-116.eu-central-1.compute.amazonaws.com",
    "files.associations": {
        "array": "cpp",
        "*.tcc": "cpp",
        "memory": "cpp",
        "future": "cpp",
        "istream": "cpp",
        "functional": "cpp",
        "tuple": "cpp",
        "utility": "cpp"
    },
    "clangd.arguments": [
        "--compile-commands-dir=${workspaceFolder}/../mbuild/releaseassert/"
    ],
    //--------------------------------------------------------------------------
    //              C++
    //--------------------------------------------------------------------------
    "clang-format.fallbackStyle": "LLVM",
    "clang-format.style": "LLVM",
    //--------------------------------------------------------------------------
    //              CMake
    //--------------------------------------------------------------------------
    "cmake.generator": "Ninja",
    "cmake.sourceDirectory": "${workspaceFolder}/../llvm-project/llvm",
    "cmake.buildDirectory": "${workspaceFolder}/../mbuild/${variant:buildType}",
    "cmake.configureSettings": {
        // "LLVM_ENABLE_LLD": "ON",
        "LLVM_TARGETS_TO_BUILD": [
            "X86",
            "ARM",
            "AArch64"
        ],
        "CMAKE_C_COMPILER_LAUNCHER": "sccache",
        "CMAKE_CXX_COMPILER_LAUNCHER": "sccache",
        "LLVM_DISABLE_INDEX_STORE": "ON",
        // "CMAKE_BUILD_TYPE:STRING": "Release",
        // "LLVM_ENABLE_ASSERTIONS": "ON",
        "LLVM_EXTERNAL_PROJECTS": [
            "cmark",
            "swift"
        ],
        "LLVM_EXTERNAL_CMARK_SOURCE_DIR": "${workspaceFolder}/../cmark",
        "LLVM_EXTERNAL_SWIFT_SOURCE_DIR": "${workspaceFolder}/../swift",
        "SWIFT_ENABLE_EXPERIMENTAL_CONCURRENCY": "TRUE",
        "SWIFT_DARWIN_DEPLOYMENT_VERSION_OSX": "10.9",
        "SWIFT_SDKS": "OSX",
        "SWIFT_DARWIN_SUPPORTED_ARCHS": ["x86_64", "arm64"],
        "SWIFT_MODULE_CACHE_PATH": "~/Library/Developer/Xcode/DerivedData/ModuleCache",
        "LLVM_PACKAGE_VERSION": "4.0.0",
        "SWIFT_BUILD_PERF_TESTSUITE": "NO",
        "SWIFT_INCLUDE_DOCS": "NO",
        "SWIFT_BUILD_RUNTIME_WITH_HOST_COMPILER": "NO",
        "SWIFT_PATH_TO_EXTERNAL_STDLIB_BUILD": "${workspaceFolder}/../mbuild/stdlib",
        "SWIFT_BUILD_REMOTE_MIRROR": "FALSE",
        "SWIFT_BUILD_DYNAMIC_STDLIB": "FALSE",
        "SWIFT_BUILD_STATIC_STDLIB": "FALSE",
        "SWIFT_BUILD_DYNAMIC_SDK_OVERLAY": "FALSE",
        "SWIFT_BUILD_STATIC_SDK_OVERLAY": "FALSE",
        "SWIFT_BUILD_STDLIB_EXTRA_TOOLCHAIN_CONTENT": "FALSE",
        "CMAKE_EXPORT_COMPILE_COMMANDS": 1
    },
    //--------------------------------------------------------------------------
    //              Editor
    //--------------------------------------------------------------------------
    "editor.mouseWheelZoom": true,
    "editor.renderIndentGuides": false,
    "editor.rulers": [
        80
    ],
    "editor.formatOnPaste": false,
    "editor.renderWhitespace": "all",
    //--------------------------------------------------------------------------
    //              Misc
    //--------------------------------------------------------------------------
    "telemetry.enableTelemetry": false,
    "telemetry.enableCrashReporter": false,
    "[cpp]": {
        "editor.defaultFormatter": "xaver.clang-format"
    },
    "workbench.iconTheme": "material-icon-theme",
    "cmake.defaultVariants": {
        "buildType": {
            "default": "debug",
            "description": "The build type.",
            "choices": {
                "debug": {
                    "short": "Debug",
                    "long": "Disable optimizations - include debug information.",
                    "buildType": "Debug",
                    "settings": {
                        "LLVM_ENABLE_ASSERTIONS": "ON",
                        "LLVM_ENABLE_PROJECTS": [
                            "clang",
                        ],
                    }
                },
                "release": {
                    "short": "Release",
                    "long": "Optimize for speed - exclude debug information.",
                    "buildType": "Release",
                    "settings": {
                        "LLVM_ENABLE_ASSERTIONS": "OFF",
                        "LLVM_ENABLE_PROJECTS": [
                            "clang",
                        ],
                    }
                },
                "releaseassert": {
                    "short": "Release+Asserts",
                    "long": "Optimize for speed - exclude debug information.",
                    "buildType": "Release",
                    "settings": {
                        "LLVM_ENABLE_ASSERTIONS": "ON",
                        "LLVM_ENABLE_PROJECTS": [
                            "clang",
                            "compiler-rt"
                        ],
                    }
                }
            }
        }
    }
}